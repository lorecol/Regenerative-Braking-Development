component ModuleType1
    % ModuleType1:2
    % Module Block
    %    Model resolution: Lumped
    %    Number of parallel assemblies: 3
    %    Number of cells per parallel assembly: 4
    %
    %    MATLAB version: 9.14
    %    Simscape Battery version: 1.1
    %    Simscape code generated on: 07-Nov-2023 14:22:01

    parameters
        SOC_vecCell = {[0, .1, .25, .5, .75, .9, 1],'1'}; % Vector of state-of-charge values, SOC
        V0_vecCell = {[3.5057, 3.566, 3.6337, 3.7127, 3.9259, 4.0777, 4.1928],'V'}; % Open-circuit voltage, V0(SOC)
        V_rangeCell = {[0, inf],'V'}; % Terminal voltage operating range [Min Max]
        R0_vecCell = {[.0085, .0085, .0087, .0082, .0083, .0085, .0085],'Ohm'}; % Terminal resistance, R0(SOC)
        AHCell = {27,'A*hr'}; % Cell capacity, AH
        extrapolation_optionCell = {simscape.enum.extrapolation.nearest,'1'}; % Extrapolation method for all tables
        R1_vecCell = {[.0029, .0024, .0026, .0016, .0023, .0018, .0017],'Ohm'}; % First polarization resistance, R1(SOC)
        tau1_vecCell = {[36, 45, 105, 29, 77, 33, 39],'s'}; % First time constant, tau1(SOC)
    end

    parameters(ExternalAccess=none)
        P = 4; % Batteries in Parallel
        S = 3; % Batteries in Series
    end

    nodes
        p = foundation.electrical.electrical; % +
        n = foundation.electrical.electrical; % -
    end

    variables
        iCell = {0,'A'}; % Cell current (positive in)
        vCell = {0,'V'}; % Cell terminal voltage
        socCell = {value={1,'1'},priority=priority.high}; % Cell state of charge
        numCyclesCell = {value={0,'1'},priority=priority.high}; % Cell discharge cycles
        vParallelAssembly = {value={repmat(0,3,1),'V'},priority=priority.none}; % Parallel Assembly Voltage
        socParallelAssembly = {value={repmat(1,3,1),'1'},priority=priority.none}; % Parallel Assembly state of charge
    end

    intermediates
        power_dissipated = NewCell.power_dissipated*((S*P)-1); % Power dissipated by (S*P)-1 cells
    end

    equations
        assert(length(iCell) == 1);
        assert(length(vCell) == 1);
        assert(length(socCell) == 1);
        assert(length(numCyclesCell) == 1);
        assert(length(vParallelAssembly) == S);
        assert(length(socParallelAssembly) == S);
        vParallelAssembly(1) == vCell;
        socParallelAssembly(1) == NewCell.stateOfCharge;
        NewCell.i == iCell;
        NewCell.v == vCell;
        NewCell.stateOfCharge == socCell;
        NewCell.num_cycles == numCyclesCell;
    end

    components(ExternalAccess=observe)
        NewCell = batteryecm.table_battery(SOC_vec = SOC_vecCell,...
            V0_vec = V0_vecCell,V_range = V_rangeCell,R0_vec = R0_vecCell,AH = AHCell,...
            extrapolation_option = extrapolation_optionCell,R1_vec = R1_vecCell,...
            tau1_vec = tau1_vecCell,...
            T_dependence = simscape.enum.tablebattery.temperature_dependence.no,prm_age_OCV = simscape.enum.tablebattery.prm_age_OCV.OCV,...
            prm_age_capacity = simscape.enum.tablebattery.prm_age.disabled,...
            prm_age_modeling = simscape.enum.tablebattery.prm_age_modeling.equation,...
            prm_age_resistance = simscape.enum.tablebattery.prm_age.disabled,...
            prm_dir = simscape.enum.tablebattery.prm_dir.noCurrentDirectionality,...
            prm_dyn = simscape.enum.tablebattery.prm_dyn.rc1,...
            prm_fade = simscape.enum.tablebattery.prm_fade.disabled,prm_leak = simscape.enum.tablebattery.prm_leak.disabled,...
            thermal_port = simscape.enum.thermaleffects.omit,i.priority = priority.none,...
            v.priority = priority.none,stateOfCharge.priority = priority.none,...
            num_cycles.priority = priority.none);
    end

    components(Access=private)
        PositiveAdapter = batteryModelFromCellSemiDetailed1RC_ICLumpingAdapters.ElectricalLumpingAdapter(...
            CellsInParallel = P,CellsInSeries = S);
        NegativeAdapter = batteryModelFromCellSemiDetailed1RC_ICLumpingAdapters.ElectricalLumpingAdapter(...
            CellsInParallel = P,CellsInSeries = S);
    end

    connections
        connect(n,NegativeAdapter.LumpedNode);
        connect(NegativeAdapter.CellNode,NewCell.n);
        connect(p,PositiveAdapter.LumpedNode);
        connect(PositiveAdapter.CellNode,NewCell.p);
    end

    annotations
        [p] : Side=top;
        [n] : Side=bottom;
        UILayout = [UIGroup("Main",SOC_vecCell,V0_vecCell,V_rangeCell,R0_vecCell,AHCell,extrapolation_optionCell),...
            UIGroup("Dynamics",R1_vecCell,tau1_vecCell)];
        Icon = 'module.svg';
    end

    for CellIdx = 2:S
        equations
            vParallelAssembly(1) == vParallelAssembly(CellIdx);
            socParallelAssembly(1) == socParallelAssembly(CellIdx);
        end
    end
end